🧩 What is a Singly Linked List?
A Singly Linked List is a linear data structure where each element (called a node) points to only the next node in the sequence.
Unlike arrays, linked lists don't use indexes and aren't stored in continuous memory.

📦 Structure of a Node
Each Node has two parts:
+------+------+
| Data | Next |
+------+------+
Data: holds the actual value (like 10, 20, etc.)
Next: points to the next node in the list (or null if it's the last node)

🔗 How It Looks:
Let’s say we have a list:
10 -> 20 -> 30 -> null

Each box (node) is linked to the next using a pointer (reference).
+------+     +------+     +------+
|  10  | --> |  20  | --> |  30  | --> null
+------+     +------+     +------+
The head is the starting node of the list (10 in this case).
We go from one node to the next using the .next pointer.

🔍 Key Points:

Dynamic size	Grows/shrinks as needed
Insertion/Deletion	Faster (especially at beginning)
Access	Slower (no indexing like arrays)
Memory	Needs extra memory for next


📚 Real Life Analogy:
Think of it like a treasure hunt:
Each clue (node) gives you a value and tells you where to find the next clue. The last one ends the hunt (points to null).
